<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>

    <bean class="org.helloframework.redis.spring.SpringOpRedis" id="SpringOpRedis">
        <property name="redisServerInfos">
            <list>
                <bean class="org.helloframework.redis.core.RedisGroup">
                    <property name="group" value="GA"/>
                    <property name="slots">
                        <value>slot1#slot2#slot3#slot4#slot5#slot6</value>
                    </property>
                    <property name="redisTemplate" ref="redisTemplate"/>
                </bean>
                <bean class="org.helloframework.redis.core.RedisGroup">
                    <property name="group" value="GB"/>
                    <property name="slots">
                        <value>slot7#slot8#slot9#slot10#slot11#slot12</value>
                    </property>
                    <property name="redisTemplate" ref="redisTemplate2"/>
                </bean>
                <bean class="org.helloframework.redis.core.RedisGroup">
                    <property name="group" value="GC"/>
                    <property name="slots">
                        <value>slot13#slot14#slot15</value>
                    </property>
                    <property name="redisTemplate" ref="redisTemplate3"/>
                </bean>
                <bean class="org.helloframework.redis.core.RedisGroup">
                    <property name="group" value="GC"/>
                    <property name="slots">
                        <value>slot16#slot17#slot18</value>
                    </property>
                    <property name="redisTemplate" ref="redisTemplate3"/>
                </bean>
                <bean class="org.helloframework.redis.core.RedisGroup">
                    <property name="group" value="GD"/>
                    <property name="slots">
                        <value>slot19#slot20#slot21#slot22#slot23#slot24</value>
                    </property>
                    <property name="redisTemplate" ref="redisTemplate3"/>
                </bean>
            </list>
        </property>
    </bean>


    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory">
            <!-- Spring-redis连接池管理工厂 -->
            <bean id="jedisConnectionFactory"
                  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
                <!-- IP地址 -->
                <property name="hostName" value="${redis.host}"/>
                <!-- 端口号 -->
                <property name="port" value="${redis.port}"/>
                <!-- 超时时间 默认2000-->
                <property name="timeout" value="${redis.timeout}"/>
                <!-- 连接池配置引用 -->
                <property name="poolConfig">
                    <!-- redis数据源 -->
                    <bean class="redis.clients.jedis.JedisPoolConfig">
                        <!-- 最大空闲数 -->
                        <property name="maxIdle" value="${redis.maxIdle}"/>
                        <!-- 最大空连接数 -->
                        <property name="maxTotal" value="${redis.maxTotal}"/>
                        <!-- 最大等待时间 -->
                        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
                        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
                        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>
                        <!-- 返回连接时，检测连接是否成功 -->
                        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
                    </bean>
                </property>
                <!-- usePool：是否使用连接池 -->
                <property name="usePool" value="true"/>
            </bean>
        </property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.helloframework.redis.utils.KryoSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.helloframework.redis.utils.KryoSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate2" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory">
            <!-- Spring-redis连接池管理工厂 -->
            <bean id="jedisConnectionFactory2"
                  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
                <!-- IP地址 -->
                <property name="hostName" value="${redis.host}"/>
                <!-- 端口号 -->
                <property name="port" value="${redis.port}"/>
                <!-- 超时时间 默认2000-->
                <property name="timeout" value="${redis.timeout}"/>
                <!-- 连接池配置引用 -->
                <property name="poolConfig">
                    <!-- redis数据源 -->
                    <bean class="redis.clients.jedis.JedisPoolConfig">
                        <!-- 最大空闲数 -->
                        <property name="maxIdle" value="${redis.maxIdle}"/>
                        <!-- 最大空连接数 -->
                        <property name="maxTotal" value="${redis.maxTotal}"/>
                        <!-- 最大等待时间 -->
                        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
                        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
                        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>
                        <!-- 返回连接时，检测连接是否成功 -->
                        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
                    </bean>
                </property>
                <!-- usePool：是否使用连接池 -->
                <property name="usePool" value="true"/>
            </bean>
        </property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.helloframework.redis.utils.KryoSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.helloframework.redis.utils.KryoSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate3" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory">
            <!-- Spring-redis连接池管理工厂 -->
            <bean id="jedisConnectionFactory3"
                  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
                <!-- IP地址 -->
                <property name="hostName" value="${redis.host}"/>
                <!-- 端口号 -->
                <property name="port" value="${redis.port}"/>
                <!-- 超时时间 默认2000-->
                <property name="timeout" value="${redis.timeout}"/>
                <!-- 连接池配置引用 -->
                <property name="poolConfig">
                    <!-- redis数据源 -->
                    <bean class="redis.clients.jedis.JedisPoolConfig">
                        <!-- 最大空闲数 -->
                        <property name="maxIdle" value="${redis.maxIdle}"/>
                        <!-- 最大空连接数 -->
                        <property name="maxTotal" value="${redis.maxTotal}"/>
                        <!-- 最大等待时间 -->
                        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
                        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
                        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>
                        <!-- 返回连接时，检测连接是否成功 -->
                        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
                    </bean>
                </property>
                <!-- usePool：是否使用连接池 -->
                <property name="usePool" value="true"/>
            </bean>
        </property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.helloframework.redis.utils.KryoSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.helloframework.redis.utils.KryoSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>
</beans>